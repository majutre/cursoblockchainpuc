// MUTUO

pragma solidity ^0.5.12;

contract Mutuo
{
    string mutuante;
    uint anosMutuante; 
    string mutuario;
    uint anosMutuario;
    uint valorMutuado;
    uint taxaJurosRemuneratorios;
    uint prazo;
    uint jurosRemuneratorios;
    uint multa;
    uint taxaJurosMoratorios;
    uint saldoDevedor;
    uint atraso;

    constructor (string memory nomeMutuante, uint idadeMutuante, string memory nomeMutuario, uint idadeMutuario, uint valor,
    uint percentualJuros, uint prazoEmMeses, uint percentualMulta, uint percentualMora) public 
    {
        require (idadeMutuante >= 16 && idadeMutuario >= 16, "Ambas as partes devem ser capazes");
        mutuante = nomeMutuante;
        anosMutuante = idadeMutuante;
        mutuario = nomeMutuario;
        anosMutuario = idadeMutuario;
        valorMutuado = valor;
        taxaJurosRemuneratorios = percentualJuros;
        prazo = prazoEmMeses;
        jurosRemuneratorios = ((valor * percentualJuros) / 100) * prazoEmMeses;
        multa = valor/percentualMulta;
        taxaJurosMoratorios = percentualMora;
        saldoDevedor = valorMutuado + jurosRemuneratorios; 
    }
    
    function totalDevido (uint mesesEmAtraso) public view returns (uint)
    {
        if (mesesEmAtraso > 0) {
            return saldoDevedor + multa + (((saldoDevedor * taxaJurosMoratorios)/100)*mesesEmAtraso);
        }
        if (mesesEmAtraso == 0) {
            return saldoDevedor;
        }
    }
    
    function totalJuros () public view returns (uint)
    {
        return jurosRemuneratorios;
    }
    
    function pagamento(uint valorPagamento, uint mesesEmAtraso) public returns (string memory)
    {
        if (mesesEmAtraso > 0 && valorPagamento <= saldoDevedor + multa + ((saldoDevedor * taxaJurosMoratorios)/100) * mesesEmAtraso &&
        atraso < 1) {
            saldoDevedor = (saldoDevedor + multa + (((saldoDevedor * taxaJurosMoratorios)/100)*mesesEmAtraso)) - valorPagamento;
            atraso++;
        }
        
        if (mesesEmAtraso > 0 && valorPagamento <= saldoDevedor + multa + ((saldoDevedor * taxaJurosMoratorios)/100) * mesesEmAtraso &&
        atraso >= 1) {
            saldoDevedor = (saldoDevedor + ((saldoDevedor * taxaJurosMoratorios)/100)*mesesEmAtraso) - valorPagamento;
        }
        
        if (mesesEmAtraso == 0 && valorPagamento <= saldoDevedor) {
            saldoDevedor = saldoDevedor - valorPagamento;
        }
        
        if (mesesEmAtraso > 0 && valorPagamento > saldoDevedor + multa + ((saldoDevedor * taxaJurosMoratorios)/100)*mesesEmAtraso) {
            string memory pagamentoMaior = "O valor de pagamento excede o valor devido";
            return pagamentoMaior;
        }
        
        if (mesesEmAtraso == 0 && valorPagamento > saldoDevedor) {
            string memory pagamentoMaior = "O valor de pagamento excede o valor devido";
            return pagamentoMaior;
        }
    }
    
    /*
    function pagamentoPrazo(uint valorPagamento) public returns (string memory)
    {
        if (valorPagamento > saldoDevedor) {
            string memory pagamentoMaior = "O valor pago excede o valor devido";
            return pagamentoMaior;
        }
        else saldoDevedor = saldoDevedor - valorPagamento;
    }
    
    function pagamentoForaPrazo(uint valorPagamentoForaPrazo, uint mesesEmAtraso) public returns (string memory)
    {
        if (valorPagamentoForaPrazo > saldoDevedor + multa + (taxaJurosMoratorios * mesesEmAtraso * saldoDevedor)) {
            string memory pagamentoMaior = "O valor pago excede o valor devido";
            return pagamentoMaior;
        }
        else saldoDevedor = saldoDevedor - valorPagamentoForaPrazo;
    }
    
    function aplicaMulta(uint mesesEmAtraso) public
    {
        require (mesesEmAtraso > 1);
        saldoDevedor = saldoDevedor + multa + (taxaJurosMoratorios * mesesEmAtraso * saldoDevedor);
    }
    */
}

// NOVO ALUGUEL

ragma solidity 0.5.12;

contract Aluguel 
{


    /*
    como fazer comentário grande sem que o compilador traga para o arquivo, basta colocar o /* para abrir o comentário e o de baixo para fechar
    */

    // vale apenas para uma linha de comentário 

    string public locador;
    string public locatario;
    uint valor;

    uint constant public numeroMaximoLegaldeAlugueisParaMulta = 3;
    //a escrita é sempre junta pois espaço é entendido como outra iformação podendo ser maiúscilo no meio


    constructor(string memory nomeLocador, string memory nomeLocatario, uint valorDoAluguel) public 
    {
    locador = nomeLocador;
    locatario = nomeLocatario;
    valor = valorDoAluguel;
    }
    // parametros são as variaveis que voce colocou dentro da função e utiliza o simbolo = para atribuir o dado
    // as chaves{} contém o contrato e as funções sempre
    // as funções são escritas entre parenteses () sendo que mesmo vazias são obrigatórias

    function valorAtualDoAluguel() public view returns (uint)
    {
        return valor;
    }
    
    //a função acima permite tornar pública a função inicialmente privada    

    function simulamulta( uint mesesRestantes, uint totalMesesContrato)    public view returns (uint valorMulta)
    {
    
    valorMulta = valor*numeroMaximoLegaldeAlugueisParaMulta;
    valorMulta = valorMulta/totalMesesContrato;
    valorMulta = valorMulta/mesesRestantes;
    return valorMulta;
    }
    
    function reajustaAluguel(uint percentualReajuste) public
    {
        if (percentualReajuste >20)
        {
            percentualReajuste = 20;
        }
        uint valorDoAcrescimo = 0;
        valorDoAcrescimo = ((valor*percentualReajuste)/100);
        valor = valor + valorDoAcrescimo;
    }
    
    function aditamentoValorAluguel (uint valorCerto) public
    {
        valor = valorCerto;
    }
    // i++ é a mesma coisa que i=i+1 (um atalho)
    
    function aplicaMulta( uint mesesRestantes, uint percentual) public
    {
        require (mesesRestantes<30, "Período de contrato Inválido");
        for (uint i=1; i <mesesRestantes; i++){
            valor = valor+((valor*percentual)/100);
            }
   // i é um indice que nesse caso são meses
    }
}

// NOVO MUTUO

pragma solidity 0.5.12;

contract Emprestimo
{
    
    string public mutuante;
    string public mutuario;
    uint256 private valorbase;
    uint256 private valor;
    uint256 private prazo;
    // Juros mantidos conforme o padrão estabelecido em lei, de 1% ao mês para contratos com prazo de 12 meses.
    uint256 constant percentualjuros = 1;
    
    constructor (string memory nomeMutuante, string memory nomeMutuario, uint256 valorBaseMutuo, uint256 prazoParaPagamento) public 
    {
        mutuante = nomeMutuante;
        mutuario = nomeMutuario;
        valorbase = valorBaseMutuo;
        prazo = prazoParaPagamento;
    }
    
    
    
    function mostraValorAtualizado () public view returns (uint256)
    {
        if (valor <= 0)
        {
            return valorbase;
        }
        
        return valor;
    }

    
    function atualizaValorMutuo (uint256 mesesDecorridos, uint256 multa) public returns (uint256 valorAtual) 
    {
        // Atualização do valor, pela modalidade de juros simples.
        valorAtual = (valorbase*percentualjuros)/100;
        valorAtual = valorAtual*mesesDecorridos;
        valorAtual = valorAtual + valorbase;
        
        if (mesesDecorridos > prazo)
        {
            // Limitar o valor da multa a 10%, pois é o máximo permitido em lei.   
            if (multa > 10)
            {
                multa = 10;
            }
            
            // A modalidade de juros moratórios será de juros compostos.
            for (uint256 i = prazo; i < mesesDecorridos; i++)
            {
                uint256 jurosMoratorios = percentualjuros;
                valorAtual = valorAtual + ((valorAtual*jurosMoratorios)/100);
            }
            
            valorAtual = valorAtual + ((valorAtual*multa)/100);
        }
        
        valor = valorAtual;
    }
    
    // Função que simula um plano de parcelamento de dívida, retornando o valor de cada parcela e o total.
    function simulaPlanoParcelamento (uint256 mesesDecorridos, uint256 parcelas) public view returns (uint256 parcela, uint256 totalParcela)
    {
        // Tempo mínimo para parcelar a dívida será de 6 meses após o vencimento da dívida.
        // Deverá atualizar o valor com os juros, caso contrário tomará como parâmetro valor = 0 (var valorBase) e não conseguirá simular.
        require (mesesDecorridos > prazo + 6, "Impossível simular parcelamento de dívida, fora do tempo mínimo.");
        
        uint256 jurosParcela = percentualjuros;
        parcela = valor / parcelas;
        parcela = parcela + ((valor*jurosParcela)/100);
        totalParcela = parcela*parcelas;
        return (parcela, totalParcela);
    }
        
}
 
 
// ESCROW

pragma solidity >=0.5.1;

contract Escrow {
    address payable public comprador; 
    address payable public vendedor;
    uint256 public preco;
    bool public entregue;  
    
    constructor (address payable novo_comprador, address payable novo_vendedor, uint256 novo_preco) public {
        comprador = novo_comprador;
        vendedor = novo_vendedor;
        preco = novo_preco;
        entregue = false;
    }

    function pagamento () payable public {
        //O produto não pode ter sido entregue ainda
        require (!entregue, "Produto pago e entregue ");
        
        //Quem está enviando deve ser o comprador
        require (comprador == msg.sender, "Quem esta tentando pagar nao é o comprador");
        
        //O valor enviado deve ser igual ao preço
        require (msg.value == preco, "Valor diferente do preco");

        //entrega produto para o comprador
        entregue = true;
                
        //transfere valor para o vendedor
        if (preco > 0) {
            address(vendedor).transfer(msg.value);
        }
                
    } 
    
    function definePartes (address payable _comprador, address payable _vendedor, uint256 _preco) public {
        //Só pode reiniciar se o produto já foi entregue
        require (entregue, "Em andamento, não é possível alterar"); 
        
        comprador = _comprador;
        vendedor = _vendedor;
        preco = _preco;
        entregue = false;
    }
} 

Se a função recebe valor, ela é "payable".
bool = verdadeiro/falso
push = "empurra" conteudo para dentro da variável.
arrays = começam do 0 (primeiro elemento);.
